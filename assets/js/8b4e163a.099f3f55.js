"use strict";(self.webpackChunkbytesofpurpose_blog=self.webpackChunkbytesofpurpose_blog||[]).push([[3801],{11470:(e,n,i)=>{i.d(n,{A:()=>w});var s=i(96540),r=i(18215),t=i(23104),l=i(56347),a=i(205),o=i(57485),c=i(31682),d=i(70679);function h(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:i}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:i,default:s}})=>({value:e,label:n,attributes:i,default:s}))}(i);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,i])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const i=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(r),(0,s.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(i.location.search);n.set(r,e),i.replace({...i.location,search:n.toString()})},[r,i])]}function g(e){const{defaultValue:n,queryString:i=!1,groupId:r}=e,t=u(e),[l,o]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find(e=>e.default)??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:t})),[c,h]=m({queryString:i,groupId:r}),[g,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,r]=(0,d.Dv)(n);return[i,(0,s.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),j=(()=>{const e=c??g;return p({value:e,tabValues:t})?e:null})();(0,a.A)(()=>{j&&o(j)},[j]);return{selectedValue:l,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),x(e)},[h,x,t]),tabValues:t}}var x=i(92303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=i(74848);function b({className:e,block:n,selectedValue:i,selectValue:s,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),c=e=>{const n=e.currentTarget,r=a.indexOf(n),t=l[r].value;t!==i&&(o(n),s(t))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=a.indexOf(e.currentTarget)+1;n=a[i]??a[0];break}case"ArrowLeft":{const i=a.indexOf(e.currentTarget)-1;n=a[i]??a[a.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:s})=>(0,v.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...s,className:(0,r.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":i===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:i}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find(e=>e.props.value===i);return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:t.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function y(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(f,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,v.jsx)(y,{...e,children:h(e.children)},String(n))}},19365:(e,n,i)=>{i.d(n,{A:()=>l});i(96540);var s=i(18215);const r={tabItem:"tabItem_Ymn6"};var t=i(74848);function l({children:e,hidden:n,className:i}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:n,children:e})}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},58599:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"skills/preparing-for-interviews/preparing-for-coding-questions","title":"Coding Questions Prep","description":"A comprehensive guide to preparing for coding interviews with systematic approach, data structures, algorithms, and problem-solving strategies","source":"@site/docs/5-skills/preparing-for-interviews/preparing-for-coding-questions.mdx","sourceDirName":"5-skills/preparing-for-interviews","slug":"/skills/preparing-for-interviews/preparing-for-coding-questions","permalink":"/docs/skills/preparing-for-interviews/preparing-for-coding-questions","draft":false,"unlisted":false,"editUrl":"https://github.com/omars-lab/omars-lab.github.io/edit/master/bytesofpurpose-blog/docs/5-skills/preparing-for-interviews/preparing-for-coding-questions.mdx","tags":[{"inline":true,"label":"interviewing","permalink":"/docs/tags/interviewing"},{"inline":true,"label":"coding","permalink":"/docs/tags/coding"},{"inline":true,"label":"algorithms","permalink":"/docs/tags/algorithms"},{"inline":true,"label":"data-structures","permalink":"/docs/tags/data-structures"},{"inline":true,"label":"technical-interview","permalink":"/docs/tags/technical-interview"},{"inline":true,"label":"preparation","permalink":"/docs/tags/preparation"}],"version":"current","sidebarPosition":10,"frontMatter":{"slug":"preparing-for-coding-questions","sidebar_position":10,"title":"Coding Questions Prep","description":"A comprehensive guide to preparing for coding interviews with systematic approach, data structures, algorithms, and problem-solving strategies","authors":["oeid"],"tags":["interviewing","coding","algorithms","data-structures","technical-interview","preparation"],"date":"2025-01-31T10:00","draft":false},"sidebar":"tutorialSidebar","previous":{"title":"Interviewing the Interviewer","permalink":"/docs/skills/preparing-for-interviews/prepraring-questions-to-ask-interviewers"},"next":{"title":"Technical Interview Prep","permalink":"/docs/skills/preparing-for-interviews/preparing-responses-for-tech-questions"}}');var r=i(74848),t=i(28453),l=i(11470),a=i(19365);const o={slug:"preparing-for-coding-questions",sidebar_position:10,title:"Coding Questions Prep",description:"A comprehensive guide to preparing for coding interviews with systematic approach, data structures, algorithms, and problem-solving strategies",authors:["oeid"],tags:["interviewing","coding","algorithms","data-structures","technical-interview","preparation"],date:"2025-01-31T10:00",draft:!1},c="Preparing for Coding Questions",d={},h=[{value:"Purpose",id:"purpose",level:2},{value:"Background Knowledge to Master",id:"background-knowledge-to-master",level:2},{value:"Data Structures &amp; Algorithms",id:"data-structures--algorithms",level:3},{value:"Essential Resources",id:"essential-resources",level:3},{value:"Systematic Approach to Coding Problems",id:"systematic-approach-to-coding-problems",level:2},{value:"Phase 1: Problem Understanding (2-3 minutes)",id:"phase-1-problem-understanding-2-3-minutes",level:3},{value:"Key Questions to Ask",id:"key-questions-to-ask",level:4},{value:"Phase 2: Approach Design (3-5 minutes)",id:"phase-2-approach-design-3-5-minutes",level:3},{value:"Problem-Solving Strategies",id:"problem-solving-strategies",level:4},{value:"Phase 3: Implementation (15-20 minutes)",id:"phase-3-implementation-15-20-minutes",level:3},{value:"Coding Best Practices",id:"coding-best-practices",level:4},{value:"Phase 4: Testing &amp; Optimization (5-10 minutes)",id:"phase-4-testing--optimization-5-10-minutes",level:3},{value:"Testing Strategy",id:"testing-strategy",level:4},{value:"Interviewer Evaluation Criteria",id:"interviewer-evaluation-criteria",level:2},{value:"What Interviewers Look For",id:"what-interviewers-look-for",level:3},{value:"Common Interviewer Questions",id:"common-interviewer-questions",level:3},{value:"Essential Coding Patterns",id:"essential-coding-patterns",level:2},{value:"Two Pointers Technique",id:"two-pointers-technique",level:3},{value:"Sliding Window Technique",id:"sliding-window-technique",level:3},{value:"Hash Map for Frequency",id:"hash-map-for-frequency",level:3},{value:"Practice Strategy",id:"practice-strategy",level:2},{value:"Daily Practice Routine",id:"daily-practice-routine",level:3},{value:"Problem Selection Strategy",id:"problem-selection-strategy",level:3},{value:"Action Items",id:"action-items",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("style",{children:"\n.tabs-container {\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  padding: 16px;\n  margin: 16px 0;\n  border: 1px solid #e9ecef;\n}\n\n.tabs-container .tabs {\n  background-color: transparent;\n}\n\n.tabs-container .tabItem {\n  background-color: transparent;\n}\n\n.checklist {\n  background-color: #e8f5e8;\n  border-left: 4px solid #28a745;\n  padding: 16px;\n  margin: 16px 0;\n}\n\n.checklist h4 {\n  color: #155724;\n  margin-top: 0;\n}\n\n.checklist ul {\n  margin-bottom: 0;\n}\n"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"preparing-for-coding-questions",children:"Preparing for Coding Questions"})}),"\n",(0,r.jsx)(n.p,{children:"A comprehensive guide to preparing for coding interviews with systematic approach, data structures, algorithms, and problem-solving strategies."}),"\n",(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"This guide was created to address three critical needs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"I need to systematically approach coding problems"}),": Learn a structured methodology to break down and solve coding challenges efficiently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"I need to master essential data structures and algorithms"}),": Build the foundational knowledge required for technical interviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"I need to develop effective problem-solving strategies"}),": Practice the communication and optimization skills that interviewers evaluate"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The goal is to transform coding interviews from stressful challenges into structured, manageable problems you can solve confidently."}),"\n",(0,r.jsx)(n.h2,{id:"background-knowledge-to-master",children:"Background Knowledge to Master"}),"\n",(0,r.jsx)(n.p,{children:"Before diving into coding problems, ensure you have solid foundational knowledge in these areas:"}),"\n",(0,r.jsx)(n.h3,{id:"data-structures--algorithms",children:"Data Structures & Algorithms"}),"\n",(0,r.jsx)("div",{className:"tabs-container",children:(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(a.A,{value:"complexity",label:"Time & Space Complexity",default:!0,children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Big-O Notation:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(1)"}),": Constant time - hash table lookups, array access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(log n)"}),": Logarithmic - binary search, balanced tree operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(n)"}),": Linear - single pass through array, linear search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(n log n)"}),": Linearithmic - merge sort, heap sort"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(n\xb2)"}),": Quadratic - bubble sort, nested loops"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"O(2\u207f)"}),": Exponential - recursive fibonacci, subset generation"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Space Complexity:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Auxiliary Space"}),": Extra space used by algorithm"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Space"}),": Space taken by input data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total Space"}),": Auxiliary + Input space"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Resources:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.bigocheatsheet.com/",children:"Big-O Cheat Sheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://souravsengupta.com/cds2016/lectures/Complexity_Cheatsheet.pdf",children:"Complexity Cheat Sheet"})}),"\n"]})]}),(0,r.jsxs)(a.A,{value:"data-structures",label:"Essential Data Structures",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arrays & Strings:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dynamic arrays, string manipulation"}),"\n",(0,r.jsx)(n.li,{children:"Two-pointer technique"}),"\n",(0,r.jsx)(n.li,{children:"Sliding window technique"}),"\n",(0,r.jsx)(n.li,{children:"Prefix sums"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Linked Lists:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Singly, doubly, circular linked lists"}),"\n",(0,r.jsx)(n.li,{children:"Fast and slow pointer technique"}),"\n",(0,r.jsx)(n.li,{children:"Reversing linked lists"}),"\n",(0,r.jsx)(n.li,{children:"Detecting cycles"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Stacks & Queues:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"LIFO vs FIFO operations"}),"\n",(0,r.jsx)(n.li,{children:"Monotonic stacks"}),"\n",(0,r.jsx)(n.li,{children:"Priority queues (heaps)"}),"\n",(0,r.jsx)(n.li,{children:"Deque for double-ended operations"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trees:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Binary trees, BST, balanced trees"}),"\n",(0,r.jsx)(n.li,{children:"Tree traversals (pre, in, post, level)"}),"\n",(0,r.jsx)(n.li,{children:"Tree construction and validation"}),"\n",(0,r.jsx)(n.li,{children:"Lowest common ancestor"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Graphs:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Adjacency list vs matrix representation"}),"\n",(0,r.jsx)(n.li,{children:"BFS vs DFS and when to use each"}),"\n",(0,r.jsx)(n.li,{children:"Topological sorting"}),"\n",(0,r.jsx)(n.li,{children:"Shortest path algorithms"}),"\n"]})]}),(0,r.jsxs)(a.A,{value:"algorithms",label:"Core Algorithms",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Searching:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Linear search, binary search"}),"\n",(0,r.jsx)(n.li,{children:"Search in rotated arrays"}),"\n",(0,r.jsx)(n.li,{children:"Find peak elements"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sorting:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Comparison-based sorts (merge, quick, heap)"}),"\n",(0,r.jsx)(n.li,{children:"Non-comparison sorts (counting, radix)"}),"\n",(0,r.jsx)(n.li,{children:"When to use each sorting algorithm"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Dynamic Programming:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Memoization vs tabulation"}),"\n",(0,r.jsx)(n.li,{children:"Common patterns (knapsack, LCS, edit distance)"}),"\n",(0,r.jsx)(n.li,{children:"State space optimization"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Greedy Algorithms:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Activity selection, fractional knapsack"}),"\n",(0,r.jsx)(n.li,{children:"Minimum spanning trees"}),"\n",(0,r.jsx)(n.li,{children:"Shortest path (Dijkstra's)"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Graph Algorithms:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"BFS and DFS implementations"}),"\n",(0,r.jsx)(n.li,{children:"Union-Find (Disjoint Set Union)"}),"\n",(0,r.jsx)(n.li,{children:"Minimum spanning tree algorithms"}),"\n"]})]})]})}),"\n",(0,r.jsx)(n.h3,{id:"essential-resources",children:"Essential Resources"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Practice Platforms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://leetcode.com/",children:"LeetCode"})," - Comprehensive problem collection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.hackerrank.com/dashboard",children:"HackerRank"})," - Structured learning paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://codingcompetitions.withgoogle.com/codejam/about/",children:"Google Code Jam"})," - Competitive programming"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.codechef.com/",children:"CodeChef"})," - Practice problems and contests"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Learning Materials:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://youtu.be/CuAXhBZ9uAg",children:"How to Break Down the Coding Problem"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=mjZpZ_wcYFg",children:"Amazon Coding Sample (SIP)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://youtu.be/KsAUCvZb8TZE",children:"Solving the Coding Problem"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://youtu.be/5gU8PSYeF6s",children:"Running the Solution and Test Cases"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://youtu.be/9OGZvZb8TZE",children:"Fine Tuning the Solution"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"systematic-approach-to-coding-problems",children:"Systematic Approach to Coding Problems"}),"\n",(0,r.jsx)("div",{className:"tabs-container",children:(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(a.A,{value:"phase1",label:"Phase 1: Problem Understanding (2-3 min)",default:!0,children:[(0,r.jsx)(n.h3,{id:"phase-1-problem-understanding-2-3-minutes",children:"Phase 1: Problem Understanding (2-3 minutes)"}),(0,r.jsxs)("div",{className:"checklist",children:[(0,r.jsx)("h4",{children:"\ud83d\udccb Problem Understanding Checklist"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Read the problem statement carefully"}),(0,r.jsx)("li",{children:"Identify input/output format"}),(0,r.jsx)("li",{children:"Ask clarifying questions"}),(0,r.jsx)("li",{children:"Identify edge cases"}),(0,r.jsx)("li",{children:"Understand constraints"}),(0,r.jsx)("li",{children:"Restate the problem in your own words"})]})]}),(0,r.jsx)(n.h4,{id:"key-questions-to-ask",children:"Key Questions to Ask"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Clarifying Questions:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What's the expected input format?"}),"\n",(0,r.jsx)(n.li,{children:"What should the output look like?"}),"\n",(0,r.jsx)(n.li,{children:"Are there any constraints on the input size?"}),"\n",(0,r.jsx)(n.li,{children:"How should I handle edge cases (empty input, single element)?"}),"\n",(0,r.jsx)(n.li,{children:"Are there any special requirements (in-place, memory constraints)?"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Edge Cases to Consider:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Empty input or null values"}),"\n",(0,r.jsx)(n.li,{children:"Single element arrays"}),"\n",(0,r.jsx)(n.li,{children:"Duplicate values"}),"\n",(0,r.jsx)(n.li,{children:"Very large or very small numbers"}),"\n",(0,r.jsx)(n.li,{children:"Boundary conditions"}),"\n"]})]}),(0,r.jsxs)(a.A,{value:"phase2",label:"Phase 2: Approach Design (3-5 min)",children:[(0,r.jsx)(n.h3,{id:"phase-2-approach-design-3-5-minutes",children:"Phase 2: Approach Design (3-5 minutes)"}),(0,r.jsxs)("div",{className:"checklist",children:[(0,r.jsx)("h4",{children:"\ud83d\udccb Approach Design Checklist"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Identify the problem type"}),(0,r.jsx)("li",{children:"Choose appropriate data structures"}),(0,r.jsx)("li",{children:"Design the algorithm"}),(0,r.jsx)("li",{children:"Consider time and space complexity"}),(0,r.jsx)("li",{children:"Think of alternative approaches"}),(0,r.jsx)("li",{children:"Explain your approach to the interviewer"})]})]}),(0,r.jsx)(n.h4,{id:"problem-solving-strategies",children:"Problem-Solving Strategies"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Common Patterns:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Two Pointers"}),": For sorted arrays, palindromes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sliding Window"}),": For substring problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hash Map"}),": For frequency counting, lookups"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stack"}),": For matching brackets, monotonic problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BFS/DFS"}),": For tree and graph traversals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Programming"}),": For optimization problems"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Algorithm Selection:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sorting"}),": When order matters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Binary Search"}),": For searching in sorted data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Greedy"}),": When local optimum leads to global optimum"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backtracking"}),": For generating all possible solutions"]}),"\n"]})]}),(0,r.jsxs)(a.A,{value:"phase3",label:"Phase 3: Implementation (15-20 min)",children:[(0,r.jsx)(n.h3,{id:"phase-3-implementation-15-20-minutes",children:"Phase 3: Implementation (15-20 minutes)"}),(0,r.jsxs)("div",{className:"checklist",children:[(0,r.jsx)("h4",{children:"\ud83d\udccb Implementation Checklist"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Write clean, readable code"}),(0,r.jsx)("li",{children:"Add meaningful variable names"}),(0,r.jsx)("li",{children:"Include comments for complex logic"}),(0,r.jsx)("li",{children:"Handle edge cases explicitly"}),(0,r.jsx)("li",{children:"Test with examples as you code"}),(0,r.jsx)("li",{children:"Explain your code as you write"})]})]}),(0,r.jsx)(n.h4,{id:"coding-best-practices",children:"Coding Best Practices"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code Quality:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use descriptive variable names"}),"\n",(0,r.jsx)(n.li,{children:"Add comments for complex logic"}),"\n",(0,r.jsx)(n.li,{children:"Keep functions small and focused"}),"\n",(0,r.jsx)(n.li,{children:"Handle edge cases explicitly"}),"\n",(0,r.jsx)(n.li,{children:"Write modular, reusable code"}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Communication:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Explain your thought process"}),"\n",(0,r.jsx)(n.li,{children:"Talk through the algorithm"}),"\n",(0,r.jsx)(n.li,{children:"Discuss trade-offs and alternatives"}),"\n",(0,r.jsx)(n.li,{children:"Show variable state changes"}),"\n",(0,r.jsx)(n.li,{children:"Walk through examples"}),"\n"]})]}),(0,r.jsxs)(a.A,{value:"phase4",label:"Phase 4: Testing & Optimization (5-10 min)",children:[(0,r.jsx)(n.h3,{id:"phase-4-testing--optimization-5-10-minutes",children:"Phase 4: Testing & Optimization (5-10 minutes)"}),(0,r.jsxs)("div",{className:"checklist",children:[(0,r.jsx)("h4",{children:"\ud83d\udccb Testing & Optimization Checklist"}),(0,r.jsxs)("ul",{children:[(0,r.jsx)("li",{children:"Test with provided examples"}),(0,r.jsx)("li",{children:"Test edge cases"}),(0,r.jsx)("li",{children:"Verify time and space complexity"}),(0,r.jsx)("li",{children:"Look for optimization opportunities"}),(0,r.jsx)("li",{children:"Handle any bugs or issues"}),(0,r.jsx)("li",{children:"Discuss potential improvements"})]})]}),(0,r.jsx)(n.h4,{id:"testing-strategy",children:"Testing Strategy"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Test Cases:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Happy Path"}),": Normal input scenarios"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge Cases"}),": Empty input, single elements, boundaries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Corner Cases"}),": Maximum/minimum values, duplicates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Invalid Input"}),": Null values, malformed data"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Optimization Opportunities:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduce time complexity"}),"\n",(0,r.jsx)(n.li,{children:"Reduce space complexity"}),"\n",(0,r.jsx)(n.li,{children:"Improve code readability"}),"\n",(0,r.jsx)(n.li,{children:"Handle edge cases more efficiently"}),"\n"]})]})]})}),"\n",(0,r.jsx)(n.h2,{id:"interviewer-evaluation-criteria",children:"Interviewer Evaluation Criteria"}),"\n",(0,r.jsx)(n.h3,{id:"what-interviewers-look-for",children:"What Interviewers Look For"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Problem-Solving Approach:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Do you ask clarifying questions?"}),"\n",(0,r.jsx)(n.li,{children:"Do you break down complex problems systematically?"}),"\n",(0,r.jsx)(n.li,{children:"Do you consider multiple approaches?"}),"\n",(0,r.jsx)(n.li,{children:"Do you explain your reasoning clearly?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technical Knowledge:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Do you choose appropriate data structures?"}),"\n",(0,r.jsx)(n.li,{children:"Do you understand time and space complexity?"}),"\n",(0,r.jsx)(n.li,{children:"Can you implement algorithms correctly?"}),"\n",(0,r.jsx)(n.li,{children:"Do you handle edge cases properly?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Communication Skills:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Do you explain your thought process?"}),"\n",(0,r.jsx)(n.li,{children:"Do you discuss trade-offs and alternatives?"}),"\n",(0,r.jsx)(n.li,{children:"Do you write clean, readable code?"}),"\n",(0,r.jsx)(n.li,{children:"Do you test your solution thoroughly?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Code Quality:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Is your code syntactically correct?"}),"\n",(0,r.jsx)(n.li,{children:"Are variable names descriptive?"}),"\n",(0,r.jsx)(n.li,{children:"Is the logic clear and well-structured?"}),"\n",(0,r.jsx)(n.li,{children:"Are edge cases handled properly?"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"common-interviewer-questions",children:"Common Interviewer Questions"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"During Problem Understanding:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"What questions do you have about this problem?"'}),"\n",(0,r.jsx)(n.li,{children:'"How would you handle [specific edge case]?"'}),"\n",(0,r.jsx)(n.li,{children:'"What are the constraints you\'re considering?"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"During Approach Design:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Why did you choose this approach?"'}),"\n",(0,r.jsx)(n.li,{children:'"What\'s the time and space complexity?"'}),"\n",(0,r.jsx)(n.li,{children:'"Are there alternative approaches you considered?"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"During Implementation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Can you explain what this part of the code does?"'}),"\n",(0,r.jsx)(n.li,{children:'"How would you handle this edge case?"'}),"\n",(0,r.jsx)(n.li,{children:'"What happens if the input is empty?"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"During Testing:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"Let\'s trace through this example step by step"'}),"\n",(0,r.jsx)(n.li,{children:'"What other test cases should we consider?"'}),"\n",(0,r.jsx)(n.li,{children:'"How would you optimize this solution?"'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"essential-coding-patterns",children:"Essential Coding Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"two-pointers-technique",children:"Two Pointers Technique"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sorted arrays"}),"\n",(0,r.jsx)(n.li,{children:"Palindrome checking"}),"\n",(0,r.jsx)(n.li,{children:"Finding pairs with target sum"}),"\n",(0,r.jsx)(n.li,{children:"Removing duplicates"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Pattern:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def two_pointers(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return [left, right]\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sliding-window-technique",children:"Sliding Window Technique"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Substring problems"}),"\n",(0,r.jsx)(n.li,{children:"Finding maximum/minimum in subarrays"}),"\n",(0,r.jsx)(n.li,{children:"Problems with fixed or variable window size"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Pattern:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def sliding_window(arr, k):\n    window_sum = sum(arr[:k])\n    max_sum = window_sum\n    \n    for i in range(k, len(arr)):\n        window_sum = window_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_sum\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hash-map-for-frequency",children:"Hash Map for Frequency"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to Use:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Counting frequencies"}),"\n",(0,r.jsx)(n.li,{children:"Finding duplicates"}),"\n",(0,r.jsx)(n.li,{children:"Anagram problems"}),"\n",(0,r.jsx)(n.li,{children:"Two sum variations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example Pattern:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def frequency_count(arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    return freq\n"})}),"\n",(0,r.jsx)(n.h2,{id:"practice-strategy",children:"Practice Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"daily-practice-routine",children:"Daily Practice Routine"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Week 1-2: Fundamentals"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Focus on basic data structures (arrays, strings, linked lists)"}),"\n",(0,r.jsx)(n.li,{children:"Practice simple algorithms (sorting, searching)"}),"\n",(0,r.jsx)(n.li,{children:"Work on problem understanding and approach design"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Week 3-4: Intermediate Topics"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Trees and graphs"}),"\n",(0,r.jsx)(n.li,{children:"Dynamic programming basics"}),"\n",(0,r.jsx)(n.li,{children:"Two pointers and sliding window"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Week 5-6: Advanced Topics"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Complex DP problems"}),"\n",(0,r.jsx)(n.li,{children:"Graph algorithms"}),"\n",(0,r.jsx)(n.li,{children:"System design coding components"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Week 7-8: Mock Interviews"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Practice full coding interviews"}),"\n",(0,r.jsx)(n.li,{children:"Focus on communication and time management"}),"\n",(0,r.jsx)(n.li,{children:"Review and optimize solutions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"problem-selection-strategy",children:"Problem Selection Strategy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Easy Problems (30%):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Build confidence and fundamentals"}),"\n",(0,r.jsx)(n.li,{children:"Focus on clean code and communication"}),"\n",(0,r.jsx)(n.li,{children:"Practice basic patterns"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Medium Problems (50%):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Core interview preparation"}),"\n",(0,r.jsx)(n.li,{children:"Practice problem-solving approach"}),"\n",(0,r.jsx)(n.li,{children:"Work on optimization"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Hard Problems (20%):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Challenge yourself"}),"\n",(0,r.jsx)(n.li,{children:"Practice complex algorithms"}),"\n",(0,r.jsx)(n.li,{children:"Prepare for senior-level interviews"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"action-items",children:"Action Items"}),"\n",(0,r.jsx)(n.p,{children:"This section contains specific action items that readers can take to enhance their understanding or apply the concepts from this post:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Master Data Structures"}),": Complete 20 problems for each core data structure (arrays, linked lists, trees, graphs) focusing on understanding when and how to use each one"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Practice Systematic Approach"}),": Work through 50 coding problems using the 4-phase approach, timing each phase and improving your problem-solving methodology"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Build Communication Skills"}),": Record yourself solving 10 coding problems, focusing on explaining your thought process, asking clarifying questions, and discussing trade-offs"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Create Problem Bank"}),": Organize 100 solved problems by pattern/technique, creating a reference guide for quick review before interviews"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each action item should be specific and measurable with clear deliverables"}),"\n",(0,r.jsx)(n.li,{children:"Focus on understanding patterns rather than memorizing solutions"}),"\n",(0,r.jsx)(n.li,{children:"Practice explaining your reasoning out loud, as communication is crucial"}),"\n",(0,r.jsx)(n.li,{children:"Consider different skill levels: beginners should focus on fundamentals, intermediate on patterns, advanced on optimization"}),"\n",(0,r.jsx)(n.li,{children:"Provide context: these skills directly translate to real-world coding challenges and technical interviews"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Coding interviews test your ability to solve problems systematically, communicate your thinking clearly, and write clean, efficient code. By mastering the fundamentals, practicing a structured approach, and developing strong communication skills, you can approach coding interviews with confidence."}),"\n",(0,r.jsx)(n.p,{children:"Remember: The goal isn't to solve every problem perfectly, but to demonstrate your problem-solving process, technical knowledge, and ability to work collaboratively with your interviewer."}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"\ud83e\udd16 AI Metadata (Click to expand)"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# AI METADATA - DO NOT REMOVE OR MODIFY\n# AI_UPDATE_INSTRUCTIONS:\n# This blog post is a comprehensive coding interview preparation guide that requires\n# careful maintenance to ensure accuracy and relevance.\n#\n# 1. SCAN_SOURCES: Monitor coding interview best practices, new algorithms, and interview trends\n# 2. EXTRACT_DATA: Identify new data structures, algorithms, and problem-solving patterns\n# 3. UPDATE_CONTENT: Update background knowledge, systematic approach, and evaluation criteria\n# 4. VERIFY_CHANGES: Ensure all checklists are comprehensive and examples are current\n# 5. MAINTAIN_FORMAT: Preserve tabbed interface, checklists, and structured approach\n#\n# CONTENT_PATTERNS:\n# - Purpose Section: Must use "I need to..." format for each bullet point\n# - Background Knowledge: Tabbed sections for different technical areas\n# - Systematic Approach: Phase-based with checklists for each phase\n# - Evaluation Criteria: Separated into what interviewers look for vs common questions\n# - Action Items: 4 specific, measurable tasks with implementation notes\n#\n# DATA_SOURCES:\n# - Primary: Coding interview best practices and algorithm resources\n# - Secondary: Practice platforms and learning materials\n# - Tertiary: This document (structured approach and evaluation criteria)\n#\n# UPDATE_TRIGGERS:\n# - New algorithms or data structures become important for interviews\n# - Changes to coding interview practices or evaluation criteria\n# - Updates to practice platforms or learning resources\n# - New problem-solving patterns or techniques emerge\n#\n# FORMATTING_RULES:\n# - Maintain exact tabbed interface format for background knowledge\n# - Preserve checklist format with green styling and checkboxes\n# - Keep systematic approach in 4 phases with time allocations\n# - Separate evaluation criteria into interviewer expectations vs common questions\n# - Use consistent technical terminology and clear explanations\n# - Action items must be specific, measurable, and include implementation notes\n# - Purpose section must use "I need to..." format for all bullet points\n# - AI metadata must be collapsible and follow exact format\n#\n# SYSTEMATIC_APPROACH_REQUIREMENTS:\n# - Phase 1: Problem Understanding (2-3 minutes) with clarifying questions\n# - Phase 2: Approach Design (3-5 minutes) with algorithm selection\n# - Phase 3: Implementation (15-20 minutes) with coding best practices\n# - Phase 4: Testing & Optimization (5-10 minutes) with testing strategy\n# - Each phase must have actionable checklist items\n# - Time allocations must be realistic for typical interview duration\n#\n# BACKGROUND_KNOWLEDGE_REQUIREMENTS:\n# - Time & Space Complexity: Big-O notation, complexity analysis\n# - Data Structures: Arrays, linked lists, stacks, queues, trees, graphs\n# - Algorithms: Searching, sorting, DP, greedy, graph algorithms\n# - Essential Resources: Curated list of practice platforms and learning materials\n# - Each knowledge area must include when to use and key concepts\n#\n# EVALUATION_CRITERIA_REQUIREMENTS:\n# - Separate what interviewers look for from common interviewer questions\n# - Cover problem-solving approach, technical knowledge, communication, code quality\n# - Include specific examples of interviewer questions for each phase\n# - Focus on what interviewers actually evaluate during coding interviews\n# - Provide clear criteria for success\n#\n# CODING_PATTERNS_REQUIREMENTS:\n# - Two Pointers Technique: When to use, example patterns\n# - Sliding Window Technique: When to use, example patterns\n# - Hash Map for Frequency: When to use, example patterns\n# - Each pattern must include clear use cases and code examples\n# - Patterns should be commonly used in coding interviews\n#\n# PRACTICE_STRATEGY_REQUIREMENTS:\n# - Daily Practice Routine: 8-week structured approach\n# - Problem Selection Strategy: Easy/Medium/Hard distribution\n# - Focus on systematic approach and communication skills\n# - Include specific recommendations for different skill levels\n#\n# UPDATE_FREQUENCY: Check quarterly or when significant changes occur in coding interview practices\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);