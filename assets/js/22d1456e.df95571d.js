"use strict";(self.webpackChunkbytesofpurpose_blog=self.webpackChunkbytesofpurpose_blog||[]).push([[5688],{1530:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"coding-challenges/solutions/longest-palindromic-substring","title":"Longest Palindromic Substring","description":"Brute Force Solution","source":"@site/docs/3-coding-challenges/solutions/longest-palindromic-substring.mdx","sourceDirName":"3-coding-challenges/solutions","slug":"/coding-challenges/solutions/longest-palindromic-substring","permalink":"/docs/coding-challenges/solutions/longest-palindromic-substring","draft":false,"unlisted":false,"editUrl":"https://github.com/omars-lab/omars-lab.github.io/edit/master/bytesofpurpose-blog/docs/3-coding-challenges/solutions/longest-palindromic-substring.mdx","tags":[],"version":"current","frontMatter":{"slug":"longest-palindromic-substring","title":"Longest Palindromic Substring"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udc49\ud83c\udffb Start Here","permalink":"/docs/coding-challenges/solutions/solutions"},"next":{"title":"README","permalink":"/docs/designs/"}}');var l=s(4848),o=s(8453);const i={slug:"longest-palindromic-substring",title:"Longest Palindromic Substring"},r="Problem",a={},d=[{value:"Brute Force Solution",id:"brute-force-solution",level:2},{value:"Recursive Solution",id:"recursive-solution",level:2},{value:"Optimal Solution",id:"optimal-solution",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"problem",children:"Problem"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:'Example 1:\n\nInput: s = "babad"\nOutput: "bab"\nExplanation: "aba" is also a valid answer.\nExample 2:\n\nInput: s = "cbbd"\nOutput: "bb"\n \n\nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n'})}),"\n",(0,l.jsx)(e.h1,{id:"solutions",children:"Solutions"}),"\n",(0,l.jsx)(e.h2,{id:"brute-force-solution",children:"Brute Force Solution"}),"\n",(0,l.jsx)("iframe",{style:{border:"1px solid rgba(0, 0, 0, 0.1);"},width:"800",height:"450",src:"https://embed.figma.com/board/dCF18hQlJfjflkf9p7MWga/Coding-Challenges?node-id=1-285&embed-host=share",allowfullscreen:!0}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-py",metastring:'title="brute_force.py"',children:'def is_palindrome(sub: str) -> bool:\n    return sub == sub[::-1]\n\nclass Solution(object):\n  def longestPalindrome(self, s):\n    """\n    :type s: str\n    :rtype: str\n    """\n    longest = ""\n    n = len(s)\n    for i in range(n):\n      for j in range(i + 1, n + 1):  # `j` is exclusive\n        substring = s[i:j]\n        longer_than_longest = len(substring) > len(longest)\n        if is_palindrome(substring) and longer_than_longest:\n          longest = substring\n    return longest\n'})}),"\n",(0,l.jsx)(e.h2,{id:"recursive-solution",children:"Recursive Solution"}),"\n",(0,l.jsx)("iframe",{style:{border:"1px solid rgba(0, 0, 0, 0.1);"},width:"800",height:"450",src:"https://embed.figma.com/board/dCF18hQlJfjflkf9p7MWga/Coding-Challenges?node-id=1-284&embed-host=share",allowfullscreen:!0}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-py",metastring:'title="recursive.py"',children:'class Solution(object):\n    def longestPalindrome(self, s):\n        """\n        :type s: str\n        :rtype: str\n        """\n        if not s:\n            return ""\n        elif "".join(list(reversed(s))) == s:\n            return s\n        left_longest = self.longestPalindrome(s[:len(s)-1])\n        right_longest = self.longestPalindrome(s[1:])\n        if len(left_longest) > len(right_longest):\n            return left_longest\n        else:\n            return right_longest\n'})}),"\n",(0,l.jsx)(e.h2,{id:"optimal-solution",children:"Optimal Solution"}),"\n",(0,l.jsx)("iframe",{style:{border:"1px solid rgba(0, 0, 0, 0.1);"},width:"800",height:"450",src:"https://embed.figma.com/board/dCF18hQlJfjflkf9p7MWga/Coding-Challenges?node-id=2-473&embed-host=share",allowfullscreen:!0}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-py",metastring:'title="optimal.py"',children:'def expand_around_center(s, left, right):\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return s[left + 1:right]\n\nclass Solution(object):\n    def longestPalindrome(self, s):\n        """\n        :type s: str\n        :rtype: str\n        """\n        longest = ""\n        for i in range(len(s)):\n            # Odd-length palindrome\n            palindrome1 = expand_around_center(s, i, i)\n            # Even-length palindrome\n            palindrome2 = expand_around_center(s, i, i + 1)\n            \n            # Update the longest palindrome if necessary\n            if len(palindrome1) > len(longest):\n                longest = palindrome1\n            if len(palindrome2) > len(longest):\n                longest = palindrome2\n\n        return longest\n'})}),"\n",(0,l.jsx)(e.h1,{id:"references",children:"References"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://leetcode.com/problems/longest-palindromic-substring/description/?envType=problem-list-v2&envId=dynamic-programming",children:"Leetcode Link"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://www.figma.com/board/dCF18hQlJfjflkf9p7MWga/Coding-Challenges?node-id=1-2&t=JNVkmhU4Nf1fWKFu-4",children:"Figma Diagram"})}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>r});var t=s(6540);const l={},o=t.createContext(l);function i(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:i(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);