"use strict";(self.webpackChunkbytesofpurpose_blog=self.webpackChunkbytesofpurpose_blog||[]).push([[8195],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},72530:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"techniques/documentation-techniques/diagrams-as-text","title":"Diagrams as Text","description":"Using text-based diagramming tools for documentation and architecture diagrams","source":"@site/docs/8-techniques/5-documentation-techniques/diagrams-as-text.mdx","sourceDirName":"8-techniques/5-documentation-techniques","slug":"/techniques/documentation-techniques/diagrams-as-text","permalink":"/docs/techniques/documentation-techniques/diagrams-as-text","draft":false,"unlisted":false,"editUrl":"https://github.com/omars-lab/omars-lab.github.io/edit/master/bytesofpurpose-blog/docs/8-techniques/5-documentation-techniques/diagrams-as-text.mdx","tags":[{"inline":true,"label":"documentation","permalink":"/docs/tags/documentation"},{"inline":true,"label":"diagrams","permalink":"/docs/tags/diagrams"},{"inline":true,"label":"plantuml","permalink":"/docs/tags/plantuml"},{"inline":true,"label":"architecture","permalink":"/docs/tags/architecture"},{"inline":true,"label":"text-based","permalink":"/docs/tags/text-based"}],"version":"current","frontMatter":{"slug":"diagrams-as-text","title":"Diagrams as Text","description":"Using text-based diagramming tools for documentation and architecture diagrams","authors":["oeid"],"tags":["documentation","diagrams","plantuml","architecture","text-based"],"date":"2022-04-19T10:00","draft":false},"sidebar":"tutorialSidebar","previous":{"title":"Puml","permalink":"/docs/techniques/documentation-techniques/diagramming-with-plantuml"},"next":{"title":"Getting Icons","permalink":"/docs/techniques/documentation-techniques/getting-icons"}}');var s=t(74848),i=t(28453);const r={slug:"diagrams-as-text",title:"Diagrams as Text",description:"Using text-based diagramming tools for documentation and architecture diagrams",authors:["oeid"],tags:["documentation","diagrams","plantuml","architecture","text-based"],date:"2022-04-19T10:00",draft:!1},l="Diagrams as Text",o={},d=[{value:"Why Text-Based Diagrams?",id:"why-text-based-diagrams",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Popular Text-Based Diagram Tools",id:"popular-text-based-diagram-tools",level:2},{value:"PlantUML",id:"plantuml",level:3},{value:"Mermaid",id:"mermaid",level:3},{value:"C4 Model",id:"c4-model",level:3},{value:"Database Diagrams",id:"database-diagrams",level:2},{value:"DBML (Database Markup Language)",id:"dbml-database-markup-language",level:3},{value:"PlantUML for Databases",id:"plantuml-for-databases",level:3},{value:"Architecture Diagrams",id:"architecture-diagrams",level:2},{value:"System Context Diagrams",id:"system-context-diagrams",level:3},{value:"Component Diagrams",id:"component-diagrams",level:3},{value:"Integration with Documentation",id:"integration-with-documentation",level:2},{value:"Docusaurus Integration",id:"docusaurus-integration",level:3},{value:"GitHub Integration",id:"github-integration",level:3},{value:"Styling and Themes",id:"styling-and-themes",level:3},{value:"Links and Navigation",id:"links-and-navigation",level:3},{value:"References",id:"references",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"diagrams-as-text",children:"Diagrams as Text"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explores using text-based diagramming tools for creating documentation and architecture diagrams. Text-based diagrams offer version control, easy collaboration, and automated generation capabilities."}),"\n",(0,s.jsx)(n.h2,{id:"why-text-based-diagrams",children:"Why Text-Based Diagrams?"}),"\n",(0,s.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Control"}),": Track changes in Git alongside your code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Collaboration"}),": Easy to review and merge diagram changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automation"}),": Generate diagrams from code or data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": Maintain uniform styling across all diagrams"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessibility"}),": Screen readers can interpret text descriptions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Diffing"}),": See exactly what changed between versions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Architecture Documentation"}),": System design and component relationships"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Design"}),": Entity Relationship Diagrams (ERDs)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Documentation"}),": Sequence diagrams and flow charts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process Flows"}),": Business process and workflow diagrams"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Documentation"}),": Class diagrams and dependency graphs"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"popular-text-based-diagram-tools",children:"Popular Text-Based Diagram Tools"}),"\n",(0,s.jsx)(n.h3,{id:"plantuml",children:"PlantUML"}),"\n",(0,s.jsx)(n.p,{children:"PlantUML is one of the most popular text-based diagramming tools."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Multiple diagram types (sequence, class, component, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Integration with many tools and platforms"}),"\n",(0,s.jsx)(n.li,{children:"Extensive customization options"}),"\n",(0,s.jsx)(n.li,{children:"Active community and documentation"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:"@startuml\nparticipant User\nparticipant System\nUser -> System: Request Data\nSystem -> System: Process Request\nSystem -> User: Return Response\n@enduml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mermaid",children:"Mermaid"}),"\n",(0,s.jsx)(n.p,{children:"Mermaid is a JavaScript-based diagramming tool that's widely supported."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Built into many platforms (GitHub, GitLab, Notion)"}),"\n",(0,s.jsx)(n.li,{children:"Real-time rendering"}),"\n",(0,s.jsx)(n.li,{children:"Multiple diagram types"}),"\n",(0,s.jsx)(n.li,{children:"Easy to learn syntax"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TD\n    A[Start] --\x3e B{Decision?}\n    B --\x3e|Yes| C[Process]\n    B --\x3e|No| D[End]\n    C --\x3e D"}),"\n",(0,s.jsx)(n.h3,{id:"c4-model",children:"C4 Model"}),"\n",(0,s.jsx)(n.p,{children:"C4 model is an architecture modeling framework that works well with text-based tools."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Levels:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Context"}),": System context and external dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container"}),": Application containers and technology choices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component"}),": Major components within containers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code"}),": Detailed class and object diagrams"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"database-diagrams",children:"Database Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"dbml-database-markup-language",children:"DBML (Database Markup Language)"}),"\n",(0,s.jsx)(n.p,{children:"DBML allows you to define database schemas in text format."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dbml",children:"Table users {\n  id integer [primary key]\n  name varchar\n  email varchar [unique]\n  created_at timestamp\n}\n\nTable posts {\n  id integer [primary key]\n  user_id integer [ref: > users.id]\n  title varchar\n  content text\n  published_at timestamp\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plantuml-for-databases",children:"PlantUML for Databases"}),"\n",(0,s.jsx)(n.p,{children:"PlantUML can also create ERDs from text descriptions."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:'@startuml\nentity "User" {\n  * id : integer\n  --\n  * name : varchar\n  * email : varchar\n  created_at : timestamp\n}\n\nentity "Post" {\n  * id : integer\n  --\n  * user_id : integer\n  * title : varchar\n  content : text\n  published_at : timestamp\n}\n\nUser ||--o{ Post\n@enduml\n'})}),"\n",(0,s.jsx)(n.h2,{id:"architecture-diagrams",children:"Architecture Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"system-context-diagrams",children:"System Context Diagrams"}),"\n",(0,s.jsx)(n.p,{children:"Show the system in its environment with external dependencies."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:'@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\n\nPerson(user, "User", "A user of the system")\nSystem(system, "My System", "The system under development")\nSystem_Ext(external, "External API", "Third-party service")\n\nRel(user, system, "Uses")\nRel(system, external, "Calls")\n@enduml\n'})}),"\n",(0,s.jsx)(n.h3,{id:"component-diagrams",children:"Component Diagrams"}),"\n",(0,s.jsx)(n.p,{children:"Show the major components and their relationships."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:'@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\n\nPerson(user, "User", "A user of the system")\nContainer(web, "Web Application", "JavaScript, React", "Provides functionality to users")\nContainer(api, "API", "Java, Spring Boot", "Handles business logic")\nContainerDb(db, "Database", "PostgreSQL", "Stores data")\n\nRel(user, web, "Uses")\nRel(web, api, "Calls")\nRel(api, db, "Reads/Writes")\n@enduml\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-documentation",children:"Integration with Documentation"}),"\n",(0,s.jsx)(n.h3,{id:"docusaurus-integration",children:"Docusaurus Integration"}),"\n",(0,s.jsx)(n.p,{children:"You can embed PlantUML diagrams in Docusaurus using plugins or custom components."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using @theme/CodeBlock:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import CodeBlock from '@theme/CodeBlock';\n\n<CodeBlock language=\"plantuml\">\n{`@startuml\nparticipant User\nparticipant System\nUser -> System: Request\nSystem -> User: Response\n@enduml`}\n</CodeBlock>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"github-integration",children:"GitHub Integration"}),"\n",(0,s.jsx)(n.p,{children:"GitHub natively supports Mermaid diagrams in markdown files."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"```mermaid\ngraph TD\n    A[Start] --\x3e B[Process]\n    B --\x3e C[End]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n## Best Practices\n\n### 1. Keep Diagrams Simple\n- Focus on the most important relationships\n- Avoid cluttering with unnecessary details\n- Use consistent naming conventions\n\n### 2. Version Control\n- Store diagram source files in Git\n- Use meaningful commit messages for diagram changes\n- Review diagram changes in pull requests\n\n### 3. Documentation\n- Include descriptions with your diagrams\n- Explain the purpose and context\n- Keep diagrams up to date with code changes\n\n### 4. Automation\n- Generate diagrams from code when possible\n- Use CI/CD to validate diagram syntax\n- Automate diagram updates based on data changes\n\n## Tools and Resources\n\n### Online Editors\n- [PlantUML Online Server](http://www.plantuml.com/plantuml/uml/)\n- [Mermaid Live Editor](https://mermaid.live/)\n- [DBML Editor](https://dbdiagram.io/)\n\n### IDE Extensions\n- **VS Code**: PlantUML, Mermaid Preview\n- **IntelliJ**: PlantUML Integration\n- **Eclipse**: PlantUML Plugin\n\n### Libraries and Frameworks\n- [C4-PlantUML](https://github.com/plantuml-stdlib/C4-PlantUML)\n- [Mermaid.js](https://mermaid.js.org/)\n- [DBML](https://www.dbml.org/)\n\n## Advanced Features\n\n### Comments and Documentation\n```plantuml\n@startuml\n' This is a comment\nparticipant User\nnote right of User\n  This is a note explaining\n  the user's role\nend note\nUser -> System: Request\n@enduml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"styling-and-themes",children:"Styling and Themes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:"@startuml\n!theme plain\nskinparam backgroundColor #FFFFFF\nskinparam componentStyle rectangle\n\ncomponent [API Gateway]\ncomponent [User Service]\ncomponent [Database]\n\n[API Gateway] --\x3e [User Service]\n[User Service] --\x3e [Database]\n@enduml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"links-and-navigation",children:"Links and Navigation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plantuml",children:"@startuml\ncomponent [Frontend] as FE\ncomponent [Backend] as BE\n\nFE -down-> BE : HTTP\nnote right of FE\n  <link:https://example.com>Documentation</link>\nend note\n@enduml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://plantuml.com/",children:"PlantUML Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://mermaid.js.org/",children:"Mermaid Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://c4model.com/",children:"C4 Model"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.dbml.org/",children:"DBML Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://kroki.io/",children:"Kroki (Diagram Rendering Service)"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);