<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Bytes of Purpose Blog</title>
        <link>https://blog.bytesofpurpose.com/blog</link>
        <description>Bytes of Purpose Blog</description>
        <lastBuildDate>Fri, 07 Mar 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[DFS vs BFS: When to Use Each Algorithm for Graph Problems]]></title>
            <link>https://blog.bytesofpurpose.com/blog/dfs-vs-bfs</link>
            <guid>https://blog.bytesofpurpose.com/blog/dfs-vs-bfs</guid>
            <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn the key differences between Depth-First Search and Breadth-First Search, and discover when to use each algorithm for optimal problem-solving.]]></description>
            <content:encoded><![CDATA[<p>When solving graph and tree problems, one of the most fundamental decisions you'll make is choosing between Depth-First Search (DFS) and Breadth-First Search (BFS). Understanding when to use each algorithm can be the difference between an elegant solution and a complex workaround.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-core-difference">The Core Difference<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#the-core-difference" class="hash-link" aria-label="Direct link to The Core Difference" title="Direct link to The Core Difference">​</a></h2>
<p><strong>Depth-First Search (DFS)</strong> explores as far as possible along each branch before backtracking. It's like exploring a maze by always taking the first available path until you hit a dead end.</p>
<p><strong>Breadth-First Search (BFS)</strong> explores all nodes at the current level before moving to the next level. It's like exploring a maze by checking all paths one step away, then all paths two steps away, and so on.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-use-bfs">When to Use BFS<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#when-to-use-bfs" class="hash-link" aria-label="Direct link to When to Use BFS" title="Direct link to When to Use BFS">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-use-bfs-when-you-need">✅ Use BFS when you need:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#-use-bfs-when-you-need" class="hash-link" aria-label="Direct link to ✅ Use BFS when you need:" title="Direct link to ✅ Use BFS when you need:">​</a></h3>
<p><strong>1. Shortest Path Problems</strong></p>
<ul>
<li>Finding the shortest path in an unweighted graph</li>
<li>Minimum steps to reach a target</li>
<li>Level-by-level exploration</li>
</ul>
<p><strong>2. Level-Based Operations</strong></p>
<ul>
<li>Grouping nodes by their distance from the root</li>
<li>Processing nodes level by level</li>
<li>Finding nodes at a specific distance</li>
</ul>
<p><strong>3. Tree Comparison</strong></p>
<ul>
<li>Comparing two trees structure</li>
<li>Checking if trees are identical or symmetric</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bfs-examples">BFS Examples:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#bfs-examples" class="hash-link" aria-label="Direct link to BFS Examples:" title="Direct link to BFS Examples:">​</a></h3>
<p><strong>Level Order Traversal:</strong></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">level_order_traversal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        level_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">queue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        level </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> _ </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">level_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            node </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            level</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">level</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Tree Comparison:</strong></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">is_same_tree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> p </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> q</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> p </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> q</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        node1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">elif</span><span class="token plain"> node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">elif</span><span class="token plain"> node1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> node2</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">True</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-use-dfs">When to Use DFS<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#when-to-use-dfs" class="hash-link" aria-label="Direct link to When to Use DFS" title="Direct link to When to Use DFS">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-use-dfs-when-you-need">✅ Use DFS when you need:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#-use-dfs-when-you-need" class="hash-link" aria-label="Direct link to ✅ Use DFS when you need:" title="Direct link to ✅ Use DFS when you need:">​</a></h3>
<p><strong>1. Path Finding</strong></p>
<ul>
<li>Finding any path (not necessarily shortest)</li>
<li>Exploring all possible paths</li>
<li>Backtracking problems</li>
</ul>
<p><strong>2. Tree/Graph Traversal</strong></p>
<ul>
<li>In-order, pre-order, post-order tree traversal</li>
<li>Exploring connected components</li>
<li>Topological sorting</li>
</ul>
<p><strong>3. Memory Efficiency</strong></p>
<ul>
<li>When you need to minimize memory usage</li>
<li>Deep trees where BFS would use too much memory</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dfs-examples">DFS Examples:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#dfs-examples" class="hash-link" aria-label="Direct link to DFS Examples:" title="Direct link to DFS Examples:">​</a></h3>
<p><strong>Path Sum:</strong></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">has_path_sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> target_sum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> target_sum</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">has_path_sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> target_sum </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            has_path_sum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> target_sum </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Connected Components:</strong></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">num_islands</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">grid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> grid</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">grid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">grid</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            grid</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        grid</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'0'</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Mark as visited</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    islands </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">grid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> j </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">grid</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> grid</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                dfs</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                islands </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> islands</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision-framework">Decision Framework<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#decision-framework" class="hash-link" aria-label="Direct link to Decision Framework" title="Direct link to Decision Framework">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ask-yourself-these-questions">Ask yourself these questions:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#ask-yourself-these-questions" class="hash-link" aria-label="Direct link to Ask yourself these questions:" title="Direct link to Ask yourself these questions:">​</a></h3>
<ol>
<li><strong>Do I need the shortest path?</strong> → BFS</li>
<li><strong>Do I need to process nodes level by level?</strong> → BFS</li>
<li><strong>Am I comparing tree structures?</strong> → BFS</li>
<li><strong>Do I need to explore all possible paths?</strong> → DFS</li>
<li><strong>Is memory usage a concern?</strong> → DFS</li>
<li><strong>Do I need to backtrack?</strong> → DFS</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="real-world-problem-word-ladder">Real-World Problem: Word Ladder<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#real-world-problem-word-ladder" class="hash-link" aria-label="Direct link to Real-World Problem: Word Ladder" title="Direct link to Real-World Problem: Word Ladder">​</a></h2>
<p>Let's solve the classic Word Ladder problem to see BFS in action:</p>
<p><strong>Problem</strong>: Transform one word into another by changing one letter at a time, where each intermediate word must be in a given dictionary.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">word_ladder</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">begin_word</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> end_word</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> word_list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> end_word </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> word_list</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    word_set </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">word_list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">begin_word</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    visited </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">begin_word</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        word</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> word </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> end_word</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> length</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Try changing each character</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token builtin">range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">word</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> c </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> word</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                new_word </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> word</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> word</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> new_word </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> word_set </span><span class="token keyword" style="color:#00009f">and</span><span class="token plain"> new_word </span><span class="token keyword" style="color:#00009f">not</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> visited</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    visited</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">new_word</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    queue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">new_word</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Why BFS?</strong> Because we need the shortest transformation sequence, and BFS guarantees we'll find the minimum number of steps.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-considerations">Performance Considerations<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#performance-considerations" class="hash-link" aria-label="Direct link to Performance Considerations" title="Direct link to Performance Considerations">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="time-complexity">Time Complexity:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#time-complexity" class="hash-link" aria-label="Direct link to Time Complexity:" title="Direct link to Time Complexity:">​</a></h3>
<ul>
<li><strong>BFS</strong>: O(V + E) where V is vertices, E is edges</li>
<li><strong>DFS</strong>: O(V + E) where V is vertices, E is edges</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="space-complexity">Space Complexity:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#space-complexity" class="hash-link" aria-label="Direct link to Space Complexity:" title="Direct link to Space Complexity:">​</a></h3>
<ul>
<li><strong>BFS</strong>: O(V) for the queue (worst case: all nodes at one level)</li>
<li><strong>DFS</strong>: O(V) for the recursion stack (worst case: depth of tree)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="common-mistakes-to-avoid">Common Mistakes to Avoid<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#common-mistakes-to-avoid" class="hash-link" aria-label="Direct link to Common Mistakes to Avoid" title="Direct link to Common Mistakes to Avoid">​</a></h2>
<ol>
<li><strong>Using DFS for shortest path problems</strong> - BFS is more efficient</li>
<li><strong>Using BFS for backtracking problems</strong> - DFS with recursion is cleaner</li>
<li><strong>Not considering memory constraints</strong> - DFS uses less memory for deep trees</li>
<li><strong>Forgetting to mark visited nodes</strong> - Can lead to infinite loops</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="practice-problems">Practice Problems<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#practice-problems" class="hash-link" aria-label="Direct link to Practice Problems" title="Direct link to Practice Problems">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bfs-problems">BFS Problems:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#bfs-problems" class="hash-link" aria-label="Direct link to BFS Problems:" title="Direct link to BFS Problems:">​</a></h3>
<ul>
<li><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener noreferrer">Binary Tree Level Order Traversal</a></li>
<li><a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="noopener noreferrer">Same Tree</a></li>
<li><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener noreferrer">Symmetric Tree</a></li>
<li><a href="https://leetcode.com/problems/word-ladder/" target="_blank" rel="noopener noreferrer">Word Ladder</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dfs-problems">DFS Problems:<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#dfs-problems" class="hash-link" aria-label="Direct link to DFS Problems:" title="Direct link to DFS Problems:">​</a></h3>
<ul>
<li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener noreferrer">Maximum Depth of Binary Tree</a></li>
<li><a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="noopener noreferrer">Path Sum</a></li>
<li><a href="https://leetcode.com/problems/number-of-islands/" target="_blank" rel="noopener noreferrer">Number of Islands</a></li>
<li><a href="https://leetcode.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener noreferrer">Validate Binary Search Tree</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://blog.bytesofpurpose.com/blog/dfs-vs-bfs#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The choice between DFS and BFS often comes down to the nature of your problem:</p>
<ul>
<li><strong>BFS</strong> is your go-to for shortest path, level-based operations, and tree comparisons</li>
<li><strong>DFS</strong> excels at path exploration, backtracking, and memory-efficient traversal</li>
</ul>
<p>Remember: both algorithms have the same time complexity, but their space usage patterns and problem-solving approaches differ significantly. Choose the one that best fits your problem's requirements and constraints.</p>
<hr>
<p><em>What's your experience with DFS vs BFS? Do you have any tips for recognizing which algorithm to use in interviews?</em></p>]]></content:encoded>
            <category>dfs</category>
            <category>bfs</category>
            <category>graph-theory</category>
            <category>algorithms</category>
            <category>leetcode</category>
        </item>
        <item>
            <title><![CDATA[Docs vs Blog Posts: When to Choose Each Format]]></title>
            <link>https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts</link>
            <guid>https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts</guid>
            <pubDate>Fri, 31 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn the key differences between documentation and blog posts to make better content decisions for your developer blog.]]></description>
            <content:encoded><![CDATA[<p>As a developer creating content, one of the most important decisions you'll make is whether your new content should be a blog post or documentation. Understanding the differences between these formats will help you create more effective content and better serve your audience.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-core-difference">The Core Difference<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#the-core-difference" class="hash-link" aria-label="Direct link to The Core Difference" title="Direct link to The Core Difference">​</a></h2>
<p><strong>Documentation</strong> is designed for reference and durability. It's the content people return to when they need to solve a specific problem or understand how something works.</p>
<p><strong>Blog posts</strong> are designed for discovery and storytelling. They capture moments in time, share experiences, and help people learn through narrative.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-choose-documentation">When to Choose Documentation<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#when-to-choose-documentation" class="hash-link" aria-label="Direct link to When to Choose Documentation" title="Direct link to When to Choose Documentation">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-choose-docs-when-your-content-is">✅ Choose docs when your content is:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#-choose-docs-when-your-content-is" class="hash-link" aria-label="Direct link to ✅ Choose docs when your content is:" title="Direct link to ✅ Choose docs when your content is:">​</a></h3>
<ul>
<li><strong>Reference material</strong>: Step-by-step guides, API documentation, configuration instructions</li>
<li><strong>Durable knowledge</strong>: Information that won't become outdated quickly</li>
<li><strong>Problem-solving focused</strong>: "How to do X" content that solves specific problems</li>
<li><strong>Comprehensive</strong>: Complete guides that cover a topic thoroughly</li>
<li><strong>Searchable</strong>: Content people will look for when they have a specific need</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="examples-of-good-documentation">Examples of good documentation:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#examples-of-good-documentation" class="hash-link" aria-label="Direct link to Examples of good documentation:" title="Direct link to Examples of good documentation:">​</a></h3>
<ul>
<li>"Setting up a local development environment"</li>
<li>"Docusaurus configuration guide"</li>
<li>"Algorithm problem-solving techniques"</li>
<li>"React component patterns"</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-choose-blog-posts">When to Choose Blog Posts<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#when-to-choose-blog-posts" class="hash-link" aria-label="Direct link to When to Choose Blog Posts" title="Direct link to When to Choose Blog Posts">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-choose-blog-posts-when-your-content-is">✅ Choose blog posts when your content is:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#-choose-blog-posts-when-your-content-is" class="hash-link" aria-label="Direct link to ✅ Choose blog posts when your content is:" title="Direct link to ✅ Choose blog posts when your content is:">​</a></h3>
<ul>
<li><strong>Time-sensitive</strong>: Current events, new tool releases, or trending topics</li>
<li><strong>Personal experience</strong>: Your journey learning something, mistakes made, lessons learned</li>
<li><strong>Opinion or analysis</strong>: Your take on industry trends or tool comparisons</li>
<li><strong>Story-driven</strong>: Content that benefits from narrative structure</li>
<li><strong>Discovery-focused</strong>: Content that helps people find new ideas or approaches</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="examples-of-good-blog-posts">Examples of good blog posts:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#examples-of-good-blog-posts" class="hash-link" aria-label="Direct link to Examples of good blog posts:" title="Direct link to Examples of good blog posts:">​</a></h3>
<ul>
<li>"My experience migrating from X to Y"</li>
<li>"Why I switched to this new framework"</li>
<li>"Lessons learned from building my first SaaS"</li>
<li>"Comparing different approaches to solve problem Z"</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-tinkering-timeline-approach">The Tinkering Timeline Approach<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#the-tinkering-timeline-approach" class="hash-link" aria-label="Direct link to The Tinkering Timeline Approach" title="Direct link to The Tinkering Timeline Approach">​</a></h2>
<p>One powerful way to think about blog posts is as a <strong>tinkering timeline</strong>. Blog posts excel at capturing:</p>
<ul>
<li><strong>The journey</strong>: What you tried, what failed, what worked</li>
<li><strong>The context</strong>: Why you made certain decisions at the time</li>
<li><strong>The evolution</strong>: How your understanding changed over time</li>
<li><strong>The human element</strong>: Frustrations, breakthroughs, and insights</li>
</ul>
<p>This approach makes your content more relatable and valuable to readers who are on similar journeys.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="content-strategy-framework">Content Strategy Framework<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#content-strategy-framework" class="hash-link" aria-label="Direct link to Content Strategy Framework" title="Direct link to Content Strategy Framework">​</a></h2>
<p>Here's a simple framework to help you decide:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ask-yourself">Ask yourself:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#ask-yourself" class="hash-link" aria-label="Direct link to Ask yourself:" title="Direct link to Ask yourself:">​</a></h3>
<ol>
<li><strong>Will this content be useful in 2 years?</strong> → Documentation</li>
<li><strong>Does this capture a specific moment or experience?</strong> → Blog post</li>
<li><strong>Are people likely to search for this exact information?</strong> → Documentation</li>
<li><strong>Does this benefit from storytelling or personal perspective?</strong> → Blog post</li>
<li><strong>Is this a complete, authoritative guide?</strong> → Documentation</li>
<li><strong>Is this about my process or journey?</strong> → Blog post</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hybrid-approach-the-best-of-both-worlds">Hybrid Approach: The Best of Both Worlds<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#hybrid-approach-the-best-of-both-worlds" class="hash-link" aria-label="Direct link to Hybrid Approach: The Best of Both Worlds" title="Direct link to Hybrid Approach: The Best of Both Worlds">​</a></h2>
<p>Sometimes the best strategy is to use both formats:</p>
<ol>
<li><strong>Write a blog post</strong> about your experience and lessons learned</li>
<li><strong>Create documentation</strong> with the technical details and step-by-step instructions</li>
<li><strong>Link between them</strong> so readers can choose their preferred format</li>
</ol>
<p>This approach maximizes the reach and usefulness of your content.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-principles-for-each-format">Key Principles for Each Format<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#key-principles-for-each-format" class="hash-link" aria-label="Direct link to Key Principles for Each Format" title="Direct link to Key Principles for Each Format">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="documentation-principles">Documentation Principles:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#documentation-principles" class="hash-link" aria-label="Direct link to Documentation Principles:" title="Direct link to Documentation Principles:">​</a></h3>
<ul>
<li>Be comprehensive and accurate</li>
<li>Use clear, scannable formatting</li>
<li>Include code examples and practical steps</li>
<li>Make it easy to find specific information</li>
<li>Keep it updated and maintained</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="blog-post-principles">Blog Post Principles:<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#blog-post-principles" class="hash-link" aria-label="Direct link to Blog Post Principles:" title="Direct link to Blog Post Principles:">​</a></h3>
<ul>
<li>Tell a story with a clear beginning, middle, and end</li>
<li>Share personal insights and experiences</li>
<li>Use engaging headlines and introductions</li>
<li>Include your thought process and decision-making</li>
<li>Make it relatable and human</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://blog.bytesofpurpose.com/blog/docs-vs-blog-posts#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The choice between documentation and blog posts isn't always clear-cut, but understanding their different purposes will help you create more effective content.</p>
<p><strong>Remember</strong>: Good documentation helps people solve problems. Good blog posts help people discover new ideas and learn from your experiences.</p>
<p>Choose the format that best serves your content's purpose and your audience's needs. And don't be afraid to experiment—sometimes the best content comes from trying a format you're less comfortable with.</p>
<hr>
<p><em>What's your experience with choosing between docs and blog posts? Do you have a framework that works well for your content strategy?</em></p>]]></content:encoded>
            <category>content-strategy</category>
            <category>blogging</category>
            <category>documentation</category>
            <category>writing</category>
        </item>
    </channel>
</rss>